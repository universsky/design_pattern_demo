/**
 * 
 */
package design.pattern.stategy;

/**
 * @author jack 用接口改进. 我们把容易引起变化的部分提取出来并封装之，来应付以后的变法。虽然代码量加大了，但可用性提高了，耦合度也降低了。
 *         我们把Duck中的fly方法和quack提取出来。
 * 
 *         继承的好处:让共同部分,可以复用.避免重复编程. 继承的不好:耦合性高.一旦超类添加一个新方法,子类都继承,拥有此方法,
 *         若子类相当部分不实现此方法,则要进行大批量修改. 继承时,子类就不可继承其它类了. 接口的好处:解决了继承耦合性高的问题.
 *         且可让实现类,继承或实现其它类或接口. 接口的不好:不能真正实现代码的复用.可用以下的策略模式来解决.
 *
 */
public interface IFlyable {
	public abstract void fly();

}
